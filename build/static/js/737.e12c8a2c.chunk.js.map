{"version":3,"file":"static/js/737.e12c8a2c.chunk.js","mappings":"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","sources":["components/button/button.component.tsx","components/button/button.styles.tsx","components/form-input/form-input.styles.tsx","components/form-input/form-input.component.tsx","components/sign-up-form/sign-up-form.styles.tsx","components/sign-up-form/sign-up-form.component.tsx","components/sign-in-form/sign-in-form.styles.tsx","components/sign-in-form/sign-in-form.component.tsx","routes/authentication/authentication.styles.tsx","routes/authentication/authentication.component.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import { FC, ButtonHTMLAttributes} from 'react';\nimport { BaseButton, ButtonSpinner, GoogleSignInButton, InvertedButton } from './button.styles';\n\nexport enum BUTTON_TYPE_CLASSES {\n    base = 'base',\n    google = 'google-sign-in',\n    inverted = 'inverted'\n}\n\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.base): typeof BaseButton => (\n    {\n        [BUTTON_TYPE_CLASSES.base]: BaseButton,\n        [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n        [BUTTON_TYPE_CLASSES.inverted]: InvertedButton\n    }[buttonType]\n)\n\nexport type ButtonProps = {\n    children?: React.ReactNode;\n    buttonType?: BUTTON_TYPE_CLASSES;\n    isLoading?: boolean;\n} & ButtonHTMLAttributes<HTMLButtonElement>\n\nconst Button: FC<ButtonProps> = ({ children, buttonType, isLoading, ...otherProps }) => {\n    const CustomButton = getButton(buttonType)\n    return (\n        <CustomButton disabled={isLoading} {...otherProps}>\n            {isLoading ? <ButtonSpinner/ > : children}\n        </CustomButton>\n    )\n}\n\nexport default Button;","import styled from 'styled-components';\nimport { SpinnerContainer } from '../spinner/spinner.styles';\n\nexport const BaseButton = styled.button`\n    min-width: 165px;\n    width: auto;\n    height: 50px;\n    letter-spacing: 0.5px;\n    line-height: 50px;\n    padding: 0 35px 0 35px;\n    font-size: 15px;\n    background-color: black;\n    color: white;\n    text-transform: uppercase;\n    font-family: 'Open Sans';\n    font-weight: bolder;\n    border: none;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    \n    &:hover {\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n    }\n`\n\nexport const GoogleSignInButton = styled(BaseButton)`\n      background-color: #4285f4;\n      color: white;\n      &:hover {\n        background-color: #357ae8;\n        border: none;\n      }\n`\n\nexport const InvertedButton = styled(BaseButton)`\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n  \n      &:hover {\n        background-color: black;\n        color: white;\n        border: none;\n      }\n`\n\nexport const ButtonSpinner = styled(SpinnerContainer)`\n  width: 30px;\n  height: 30px;\n`\n","import styled, { css } from 'styled-components';\n\nconst subColor = 'grey';\nconst mainColor = 'black';\n\nconst shrinkLabelStyles = css`\n  top: -14px;\n  font-size: 12px;\n  color: ${mainColor};\n`\n\ntype FormInputLabelProps = {\n  shrink?: boolean\n}\n\nexport const FormInputLabel = styled.label<FormInputLabelProps>`\n  color: ${subColor};\n  font-size: 16px;\n  font-weight: normal;\n  position: absolute;\n  pointer-events: none;\n  left: 5px;\n  top: 10px;\n  transition: 300ms ease all;\n\n  ${({ shrink }) => shrink && shrinkLabelStyles};\n  &.shrink {\n    @include shrinkLabel();\n  }\n`\n\nexport const Input = styled.input`\n  background: none;\n  background-color: white;\n  color: ${subColor};\n  font-size: 18px;\n  padding: 10px 10px 10px 5px;\n  display: block;\n  width: 100%;\n  border: none;\n  border-radius: 0;\n  border-bottom: 1px solid ${subColor};\n  margin: 25px 0;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:focus ~ ${FormInputLabel} {\n    ${shrinkLabelStyles};\n  }\n`\n\nexport const Group = styled.div`\n  position: relative;\n  margin: 45px 0;\n  input[type = 'password'] {\n  letter-spacing: 0.3em;\n  }\n`\n ","import { InputHTMLAttributes, FC, HtmlHTMLAttributes } from \"react\";\nimport { FormInputLabel, Input, Group } from \"./form-input.styles\";\n\ntype FormInputProps = { label: string } & InputHTMLAttributes<HTMLInputElement>\n\nconst FormInput: FC<FormInputProps> = ({ label, ...otherProps }) => {\n    return (\n        <Group>\n            <Input {...otherProps} />\n            {\n                <FormInputLabel shrink={Boolean(otherProps.value && typeof otherProps.value === 'string' && otherProps.value.length)}>{label}</FormInputLabel>\n            }\n        </Group>\n    )\n\n}\n\nexport default FormInput;","import styled from 'styled-components';\n\nexport const SignUpContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 380px;\n\n  h2 {\n    margin: 10px 0;\n  }\n`;","import { ChangeEvent, FormEvent, useState } from 'react';\nimport { AuthError, AuthErrorCodes } from 'firebase/auth';\nimport { useDispatch } from 'react-redux';\nimport FormInput from '../form-input/form-input.component';\nimport Button from '../button/button.component';\nimport { SignUpContainer } from './sign-up-form.styles';\nimport { signUpStart } from '../../store/user/user.action';\n\nconst defaultFormFields = {\n  displayName: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n\nconst SignUpForm = () => {\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const { displayName, email, password, confirmPassword } = formFields;\n  const dispatch = useDispatch();\n\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  };\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert('passwords do not match');\n      return;\n    }\n\n    try {\n      dispatch(signUpStart(email, password, displayName))\n      resetFormFields();\n    } catch (error) {\n      if ((error as AuthError).code === AuthErrorCodes.EMAIL_EXISTS) {\n        alert('Cannot create user, email already in use');\n      } else {\n        console.log('user creation encountered an error', error);\n      }\n    }\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setFormFields({ ...formFields, [name]: value });\n  };\n\n  return (\n    <SignUpContainer>\n      <h2>Don't have an account?</h2>\n      <span>Sign up with your email and password</span>\n      <form onSubmit={handleSubmit}>\n        <FormInput\n          label='Display Name'\n          type='text'\n          required\n          onChange={handleChange}\n          name='displayName'\n          value={displayName}\n        />\n\n        <FormInput\n          label='Email'\n          type='email'\n          required\n          onChange={handleChange}\n          name='email'\n          value={email}\n        />\n\n        <FormInput\n          label='Password'\n          type='password'\n          required\n          onChange={handleChange}\n          name='password'\n          value={password}\n        />\n\n        <FormInput\n          label='Confirm Password'\n          type='password'\n          required\n          onChange={handleChange}\n          name='confirmPassword'\n          value={confirmPassword}\n        />\n        <Button type='submit'>Sign Up</Button>\n      </form>\n    </SignUpContainer>\n  );\n};\n\nexport default SignUpForm;","import styled from 'styled-components';\n\nexport const SignInContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 380px;\n\n  h2 {\n    margin: 10px 0;\n  }\n`;\n\nexport const ButtonsContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;","import { useState, FormEvent, ChangeEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport FormInput from '../form-input/form-input.component';\nimport Button, { BUTTON_TYPE_CLASSES } from '../button/button.component';\nimport { SignInContainer, ButtonsContainer } from './sign-in-form.styles';\nimport { googleSignInStart, emailSignInStart } from '../../store/user/user.action';\n\nconst defaultFormFields = {\n    email: '',\n    password: '',\n};\n\nconst SignInForm = () => {\n    const [formFields, setFormFields] = useState(defaultFormFields);\n    const { email, password } = formFields;\n    const dispatch = useDispatch()\n\n    const resetFormFields = () => {\n        setFormFields(defaultFormFields);\n    };\n\n    const signInWithGoogle = async () => {\n        dispatch(googleSignInStart());\n    };\n\n    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        try {\n            dispatch(emailSignInStart(email, password));\n            resetFormFields();\n        } catch (error) {\n            console.log('user sign in failed', error);\n        }\n    };\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n\n        setFormFields({ ...formFields, [name]: value });\n    };\n\n    return (\n        <SignInContainer>\n            <h2>Already have an account?</h2>\n            <span>Sign in with your email and password</span>\n            <form onSubmit={handleSubmit}>\n                <FormInput\n                    label='Email'\n                    type='email'\n                    required\n                    onChange={handleChange}\n                    name='email'\n                    value={email}\n                />\n\n                <FormInput\n                    label='Password'\n                    type='password'\n                    required\n                    onChange={handleChange}\n                    name='password'\n                    value={password}\n                />\n                <ButtonsContainer>\n                    <Button type='submit'>Sign In</Button>\n                    <Button\n                        buttonType={BUTTON_TYPE_CLASSES.google}\n                        type='button'\n                        onClick={signInWithGoogle}\n                    >\n                        Sign In With Google\n                    </Button>\n                </ButtonsContainer>\n            </form>\n        </SignInContainer>\n    );\n};\n\nexport default SignInForm;","import styled from 'styled-components';\n\nexport const AuthenticationContainer = styled.div`\n  display: flex;\n  width: 900px;\n  justify-content: space-between;\n  margin: 30px auto;\n`;","import SignUpForm from '../../components/sign-up-form/sign-up-form.component';\nimport SignInForm from '../../components/sign-in-form/sign-in-form.component';\n\nimport { AuthenticationContainer } from './authentication.styles';\n\nconst Authentication = () => {\n  return (\n    <AuthenticationContainer>\n      <SignInForm />\n      <SignUpForm />\n    </AuthenticationContainer>\n  );\n};\n\nexport default Authentication;","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}"],"names":["BUTTON_TYPE_CLASSES","_ref","children","buttonType","isLoading","otherProps","_objectWithoutProperties","_excluded","CustomButton","_BUTTON_TYPE_CLASSES$","arguments","length","undefined","base","_defineProperty","BaseButton","google","GoogleSignInButton","inverted","InvertedButton","getButton","_jsx","_objectSpread","disabled","ButtonSpinner","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","SpinnerContainer","_templateObject4","subColor","shrinkLabelStyles","css","FormInputLabel","shrink","Input","Group","label","_jsxs","Boolean","value","SignUpContainer","defaultFormFields","displayName","email","password","confirmPassword","_useState","useState","_useState2","_slicedToArray","formFields","setFormFields","dispatch","useDispatch","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","wrap","_context","prev","next","preventDefault","alert","abrupt","signUpStart","error","code","AuthErrorCodes","console","log","stop","_x","apply","handleChange","_event$target","target","name","onSubmit","FormInput","type","required","onChange","Button","SignInContainer","ButtonsContainer","signInWithGoogle","googleSignInStart","_ref2","_callee2","_context2","emailSignInStart","onClick","AuthenticationContainer","SignInForm","SignUpForm","source","excluded","key","i","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"sourceRoot":""}